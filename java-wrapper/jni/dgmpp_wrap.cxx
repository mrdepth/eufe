/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "dgmpp.hpp"
using namespace std::chrono_literals;
	
	namespace dgmpp {
		typedef double Seconds;
		
		template<typename Rep, typename Ratio>
		inline Seconds MakeSeconds(const std::chrono::duration<Rep, Ratio>& v) {
			return std::chrono::duration_cast<std::chrono::seconds>(v).count();
		}
	}



#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< dgmpp::Attribute * >::const_reference std_vector_Sl_dgmpp_Attribute_Sm__Sg__get(std::vector< dgmpp::Attribute * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_dgmpp_Attribute_Sm__Sg__set(std::vector< dgmpp::Attribute * > *self,int i,std::vector< dgmpp::Attribute * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN dgmpp::AttributeID dgmpp_Attribute_attributeID(dgmpp::Attribute const *self){ return self->metaInfo().attributeID; }
SWIGINTERN std::vector< dgmpp::Type * >::const_reference std_vector_Sl_dgmpp_Type_Sm__Sg__get(std::vector< dgmpp::Type * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_dgmpp_Type_Sm__Sg__set(std::vector< dgmpp::Type * > *self,int i,std::vector< dgmpp::Type * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN dgmpp::TypeID dgmpp_Type_typeID(dgmpp::Type const *self){ return self->metaInfo().typeID; }
SWIGINTERN dgmpp::GroupID dgmpp_Type_groupID(dgmpp::Type const *self){ return self->metaInfo().groupID; }
SWIGINTERN dgmpp::CategoryID dgmpp_Type_categoryID(dgmpp::Type const *self){ return self->metaInfo().categoryID; }
SWIGINTERN dgmpp::Attribute *dgmpp_Type_attribute(dgmpp::Type *self,dgmpp::AttributeID attributeID){
				return ((*self)[attributeID]);
			}
SWIGINTERN std::vector< dgmpp::Type * > dgmpp_Type_affectors(dgmpp::Type const *self){
				auto c = self->affectors();
				return {c.begin(), c.end()};
			}
SWIGINTERN std::vector< dgmpp::Attribute * > dgmpp_Type_attributes(dgmpp::Type const *self){
				auto c = self->attributes();
				return {c.begin(), c.end()};
			}
SWIGINTERN dgmpp::Seconds dgmpp_Module_reloadTime(dgmpp::Module *self){
				return dgmpp::MakeSeconds(self->reloadTime());
			}
SWIGINTERN dgmpp::Seconds dgmpp_Module_cycleTime(dgmpp::Module *self){
				return dgmpp::MakeSeconds(self->cycleTime());
			}
SWIGINTERN dgmpp::Seconds dgmpp_Module_rawCycleTime(dgmpp::Module *self){
				return dgmpp::MakeSeconds(self->rawCycleTime());
			}
SWIGINTERN dgmpp::Seconds dgmpp_Module_lifeTime(dgmpp::Module *self){
				if (auto lifeTime = self->lifeTime())
					return dgmpp::MakeSeconds(*lifeTime);
				else
					return -1;
			}
SWIGINTERN std::vector< enum dgmpp::GroupID >::const_reference std_vector_Sl_dgmpp_GroupID_Sg__get(std::vector< dgmpp::GroupID > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_dgmpp_GroupID_Sg__set(std::vector< dgmpp::GroupID > *self,int i,std::vector< enum dgmpp::GroupID >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< enum dgmpp::Module::State >::const_reference std_vector_Sl_dgmpp_Module_State_Sg__get(std::vector< dgmpp::Module::State > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_dgmpp_Module_State_Sg__set(std::vector< dgmpp::Module::State > *self,int i,std::vector< enum dgmpp::Module::State >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN dgmpp::Seconds dgmpp_Drone_cycleTime(dgmpp::Drone *self){
				return dgmpp::MakeSeconds(self->cycleTime());
			}
SWIGINTERN std::vector< enum dgmpp::CategoryID >::const_reference std_vector_Sl_dgmpp_CategoryID_Sg__get(std::vector< dgmpp::CategoryID > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_dgmpp_CategoryID_Sg__set(std::vector< dgmpp::CategoryID > *self,int i,std::vector< enum dgmpp::CategoryID >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< dgmpp::Module * >::const_reference std_vector_Sl_dgmpp_Module_Sm__Sg__get(std::vector< dgmpp::Module * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_dgmpp_Module_Sm__Sg__set(std::vector< dgmpp::Module * > *self,int i,std::vector< dgmpp::Module * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< dgmpp::Drone * >::const_reference std_vector_Sl_dgmpp_Drone_Sm__Sg__get(std::vector< dgmpp::Drone * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_dgmpp_Drone_Sm__Sg__set(std::vector< dgmpp::Drone * > *self,int i,std::vector< dgmpp::Drone * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN dgmpp::Seconds dgmpp_Capacitor_rechargeTime(dgmpp::Capacitor *self){
				return dgmpp::MakeSeconds(self->rechargeTime());
			}
SWIGINTERN dgmpp::Seconds dgmpp_Capacitor_lastsTime(dgmpp::Capacitor *self){
				return dgmpp::MakeSeconds(self->lastsTime());
			}
SWIGINTERN dgmpp::Seconds dgmpp_Ship_alignTime(dgmpp::Ship *self){
				return dgmpp::MakeSeconds(self->alignTime());
			}
SWIGINTERN std::vector< dgmpp::Character * >::const_reference std_vector_Sl_dgmpp_Character_Sm__Sg__get(std::vector< dgmpp::Character * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_dgmpp_Character_Sm__Sg__set(std::vector< dgmpp::Character * > *self,int i,std::vector< dgmpp::Character * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< dgmpp::Implant * >::const_reference std_vector_Sl_dgmpp_Implant_Sm__Sg__get(std::vector< dgmpp::Implant * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_dgmpp_Implant_Sm__Sg__set(std::vector< dgmpp::Implant * > *self,int i,std::vector< dgmpp::Implant * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< dgmpp::Booster * >::const_reference std_vector_Sl_dgmpp_Booster_Sm__Sg__get(std::vector< dgmpp::Booster * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_dgmpp_Booster_Sm__Sg__set(std::vector< dgmpp::Booster * > *self,int i,std::vector< dgmpp::Booster * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< dgmpp::Skill * >::const_reference std_vector_Sl_dgmpp_Skill_Sm__Sg__get(std::vector< dgmpp::Skill * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_dgmpp_Skill_Sm__Sg__set(std::vector< dgmpp::Skill * > *self,int i,std::vector< dgmpp::Skill * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_DamageVector_1em_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  dgmpp::HP arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  arg2 = (dgmpp::HP)jarg2; 
  if (arg1) (arg1)->em = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_DamageVector_1em_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  dgmpp::HP result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  result = (dgmpp::HP) ((arg1)->em);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_DamageVector_1thermal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  dgmpp::HP arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  arg2 = (dgmpp::HP)jarg2; 
  if (arg1) (arg1)->thermal = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_DamageVector_1thermal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  dgmpp::HP result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  result = (dgmpp::HP) ((arg1)->thermal);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_DamageVector_1kinetic_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  dgmpp::HP arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  arg2 = (dgmpp::HP)jarg2; 
  if (arg1) (arg1)->kinetic = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_DamageVector_1kinetic_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  dgmpp::HP result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  result = (dgmpp::HP) ((arg1)->kinetic);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_DamageVector_1explosive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  dgmpp::HP arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  arg2 = (dgmpp::HP)jarg2; 
  if (arg1) (arg1)->explosive = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_DamageVector_1explosive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  dgmpp::HP result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  result = (dgmpp::HP) ((arg1)->explosive);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1DamageVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dgmpp::DamageVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::DamageVector *)new dgmpp::DamageVector();
  *(dgmpp::DamageVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1DamageVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::DamageVector *arg1 = (dgmpp::DamageVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::DamageVector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_DamagePerSecond_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::rate< dgmpp::DamageVector,std::chrono::seconds > *arg1 = (dgmpp::rate< dgmpp::DamageVector,std::chrono::seconds > *) 0 ;
  dgmpp::DamageVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::rate< dgmpp::DamageVector,std::chrono::seconds > **)&jarg1; 
  result = ((dgmpp::rate< dgmpp::DamageVector,std::chrono::seconds > const *)arg1)->count();
  *(dgmpp::DamageVector **)&jresult = new dgmpp::DamageVector((const dgmpp::DamageVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1DamagePerSecond(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dgmpp::rate< dgmpp::DamageVector,std::chrono::seconds > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::rate< dgmpp::DamageVector,std::chrono::seconds > *)new dgmpp::rate< dgmpp::DamageVector,std::chrono::seconds >();
  *(dgmpp::rate< dgmpp::DamageVector,std::chrono::seconds > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1DamagePerSecond(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::rate< dgmpp::DamageVector,std::chrono::seconds > *arg1 = (dgmpp::rate< dgmpp::DamageVector,std::chrono::seconds > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::rate< dgmpp::DamageVector,std::chrono::seconds > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_UnitsPerSecond_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::rate< dgmpp::Float,std::chrono::seconds > *arg1 = (dgmpp::rate< dgmpp::Float,std::chrono::seconds > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::rate< dgmpp::Float,std::chrono::seconds > **)&jarg1; 
  result = (double)((dgmpp::rate< dgmpp::Float,std::chrono::seconds > const *)arg1)->count();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1UnitsPerSecond(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dgmpp::rate< dgmpp::Float,std::chrono::seconds > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::rate< dgmpp::Float,std::chrono::seconds > *)new dgmpp::rate< dgmpp::Float,std::chrono::seconds >();
  *(dgmpp::rate< dgmpp::Float,std::chrono::seconds > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1UnitsPerSecond(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::rate< dgmpp::Float,std::chrono::seconds > *arg1 = (dgmpp::rate< dgmpp::Float,std::chrono::seconds > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::rate< dgmpp::Float,std::chrono::seconds > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_UnitsPerHour_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::rate< dgmpp::Float,std::chrono::hours > *arg1 = (dgmpp::rate< dgmpp::Float,std::chrono::hours > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::rate< dgmpp::Float,std::chrono::hours > **)&jarg1; 
  result = (double)((dgmpp::rate< dgmpp::Float,std::chrono::hours > const *)arg1)->count();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1UnitsPerHour(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dgmpp::rate< dgmpp::Float,std::chrono::hours > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::rate< dgmpp::Float,std::chrono::hours > *)new dgmpp::rate< dgmpp::Float,std::chrono::hours >();
  *(dgmpp::rate< dgmpp::Float,std::chrono::hours > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1UnitsPerHour(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::rate< dgmpp::Float,std::chrono::hours > *arg1 = (dgmpp::rate< dgmpp::Float,std::chrono::hours > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::rate< dgmpp::Float,std::chrono::hours > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Tank_1passiveShield_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  dgmpp::HPPerSecond *arg2 = (dgmpp::HPPerSecond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  arg2 = *(dgmpp::HPPerSecond **)&jarg2; 
  if (arg1) (arg1)->passiveShield = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Tank_1passiveShield_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  dgmpp::HPPerSecond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  result = (dgmpp::HPPerSecond *)& ((arg1)->passiveShield);
  *(dgmpp::HPPerSecond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Tank_1shieldRepair_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  dgmpp::HPPerSecond *arg2 = (dgmpp::HPPerSecond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  arg2 = *(dgmpp::HPPerSecond **)&jarg2; 
  if (arg1) (arg1)->shieldRepair = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Tank_1shieldRepair_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  dgmpp::HPPerSecond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  result = (dgmpp::HPPerSecond *)& ((arg1)->shieldRepair);
  *(dgmpp::HPPerSecond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Tank_1armorRepair_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  dgmpp::HPPerSecond *arg2 = (dgmpp::HPPerSecond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  arg2 = *(dgmpp::HPPerSecond **)&jarg2; 
  if (arg1) (arg1)->armorRepair = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Tank_1armorRepair_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  dgmpp::HPPerSecond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  result = (dgmpp::HPPerSecond *)& ((arg1)->armorRepair);
  *(dgmpp::HPPerSecond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Tank_1hullRepair_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  dgmpp::HPPerSecond *arg2 = (dgmpp::HPPerSecond *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  arg2 = *(dgmpp::HPPerSecond **)&jarg2; 
  if (arg1) (arg1)->hullRepair = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Tank_1hullRepair_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  dgmpp::HPPerSecond *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  result = (dgmpp::HPPerSecond *)& ((arg1)->hullRepair);
  *(dgmpp::HPPerSecond **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Tank(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dgmpp::Tank *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Tank *)new dgmpp::Tank();
  *(dgmpp::Tank **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Tank(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Tank *arg1 = (dgmpp::Tank *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Tank **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Resistances_1Layer_1em_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  dgmpp::Resistances::Layer *arg1 = (dgmpp::Resistances::Layer *) 0 ;
  dgmpp::Percent arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Resistances::Layer **)&jarg1; 
  arg2 = (dgmpp::Percent)jarg2; 
  if (arg1) (arg1)->em = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Resistances_1Layer_1em_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Resistances::Layer *arg1 = (dgmpp::Resistances::Layer *) 0 ;
  dgmpp::Percent result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Resistances::Layer **)&jarg1; 
  result = (dgmpp::Percent) ((arg1)->em);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Resistances_1Layer_1thermal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  dgmpp::Resistances::Layer *arg1 = (dgmpp::Resistances::Layer *) 0 ;
  dgmpp::Percent arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Resistances::Layer **)&jarg1; 
  arg2 = (dgmpp::Percent)jarg2; 
  if (arg1) (arg1)->thermal = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Resistances_1Layer_1thermal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Resistances::Layer *arg1 = (dgmpp::Resistances::Layer *) 0 ;
  dgmpp::Percent result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Resistances::Layer **)&jarg1; 
  result = (dgmpp::Percent) ((arg1)->thermal);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Resistances_1Layer_1kinetic_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  dgmpp::Resistances::Layer *arg1 = (dgmpp::Resistances::Layer *) 0 ;
  dgmpp::Percent arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Resistances::Layer **)&jarg1; 
  arg2 = (dgmpp::Percent)jarg2; 
  if (arg1) (arg1)->kinetic = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Resistances_1Layer_1kinetic_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Resistances::Layer *arg1 = (dgmpp::Resistances::Layer *) 0 ;
  dgmpp::Percent result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Resistances::Layer **)&jarg1; 
  result = (dgmpp::Percent) ((arg1)->kinetic);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Resistances_1Layer_1explosive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  dgmpp::Resistances::Layer *arg1 = (dgmpp::Resistances::Layer *) 0 ;
  dgmpp::Percent arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Resistances::Layer **)&jarg1; 
  arg2 = (dgmpp::Percent)jarg2; 
  if (arg1) (arg1)->explosive = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Resistances_1Layer_1explosive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Resistances::Layer *arg1 = (dgmpp::Resistances::Layer *) 0 ;
  dgmpp::Percent result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Resistances::Layer **)&jarg1; 
  result = (dgmpp::Percent) ((arg1)->explosive);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Resistances_1Layer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dgmpp::Resistances::Layer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Resistances::Layer *)new dgmpp::Resistances::Layer();
  *(dgmpp::Resistances::Layer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Resistances_1Layer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Resistances::Layer *arg1 = (dgmpp::Resistances::Layer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Resistances::Layer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Resistances_1shield_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Resistances *arg1 = (dgmpp::Resistances *) 0 ;
  dgmpp::Resistances::Layer *arg2 = (dgmpp::Resistances::Layer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Resistances **)&jarg1; 
  arg2 = *(dgmpp::Resistances::Layer **)&jarg2; 
  if (arg1) (arg1)->shield = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Resistances_1shield_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Resistances *arg1 = (dgmpp::Resistances *) 0 ;
  dgmpp::Resistances::Layer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Resistances **)&jarg1; 
  result = (dgmpp::Resistances::Layer *)& ((arg1)->shield);
  *(dgmpp::Resistances::Layer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Resistances_1armor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Resistances *arg1 = (dgmpp::Resistances *) 0 ;
  dgmpp::Resistances::Layer *arg2 = (dgmpp::Resistances::Layer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Resistances **)&jarg1; 
  arg2 = *(dgmpp::Resistances::Layer **)&jarg2; 
  if (arg1) (arg1)->armor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Resistances_1armor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Resistances *arg1 = (dgmpp::Resistances *) 0 ;
  dgmpp::Resistances::Layer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Resistances **)&jarg1; 
  result = (dgmpp::Resistances::Layer *)& ((arg1)->armor);
  *(dgmpp::Resistances::Layer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Resistances_1hull_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Resistances *arg1 = (dgmpp::Resistances *) 0 ;
  dgmpp::Resistances::Layer *arg2 = (dgmpp::Resistances::Layer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Resistances **)&jarg1; 
  arg2 = *(dgmpp::Resistances::Layer **)&jarg2; 
  if (arg1) (arg1)->hull = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Resistances_1hull_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Resistances *arg1 = (dgmpp::Resistances *) 0 ;
  dgmpp::Resistances::Layer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Resistances **)&jarg1; 
  result = (dgmpp::Resistances::Layer *)& ((arg1)->hull);
  *(dgmpp::Resistances::Layer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Resistances(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dgmpp::Resistances *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Resistances *)new dgmpp::Resistances();
  *(dgmpp::Resistances **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Resistances(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Resistances *arg1 = (dgmpp::Resistances *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Resistances **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_HitPoints_1shield_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  dgmpp::HitPoints *arg1 = (dgmpp::HitPoints *) 0 ;
  dgmpp::HP arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::HitPoints **)&jarg1; 
  arg2 = (dgmpp::HP)jarg2; 
  if (arg1) (arg1)->shield = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_HitPoints_1shield_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::HitPoints *arg1 = (dgmpp::HitPoints *) 0 ;
  dgmpp::HP result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::HitPoints **)&jarg1; 
  result = (dgmpp::HP) ((arg1)->shield);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_HitPoints_1armor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  dgmpp::HitPoints *arg1 = (dgmpp::HitPoints *) 0 ;
  dgmpp::HP arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::HitPoints **)&jarg1; 
  arg2 = (dgmpp::HP)jarg2; 
  if (arg1) (arg1)->armor = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_HitPoints_1armor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::HitPoints *arg1 = (dgmpp::HitPoints *) 0 ;
  dgmpp::HP result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::HitPoints **)&jarg1; 
  result = (dgmpp::HP) ((arg1)->armor);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_HitPoints_1hull_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  dgmpp::HitPoints *arg1 = (dgmpp::HitPoints *) 0 ;
  dgmpp::HP arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::HitPoints **)&jarg1; 
  arg2 = (dgmpp::HP)jarg2; 
  if (arg1) (arg1)->hull = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_HitPoints_1hull_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::HitPoints *arg1 = (dgmpp::HitPoints *) 0 ;
  dgmpp::HP result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::HitPoints **)&jarg1; 
  result = (dgmpp::HP) ((arg1)->hull);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1HitPoints(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dgmpp::HitPoints *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::HitPoints *)new dgmpp::HitPoints();
  *(dgmpp::HitPoints **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1HitPoints(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::HitPoints *arg1 = (dgmpp::HitPoints *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::HitPoints **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Attributes_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Attribute * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< dgmpp::Attribute * > *)new std::vector< dgmpp::Attribute * >();
  *(std::vector< dgmpp::Attribute * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Attributes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Attribute * >::size_type arg1 ;
  std::vector< dgmpp::Attribute * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< dgmpp::Attribute * >::size_type)jarg1; 
  result = (std::vector< dgmpp::Attribute * > *)new std::vector< dgmpp::Attribute * >(arg1);
  *(std::vector< dgmpp::Attribute * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Attributes_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Attribute * > *arg1 = (std::vector< dgmpp::Attribute * > *) 0 ;
  std::vector< dgmpp::Attribute * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Attribute * > **)&jarg1; 
  result = ((std::vector< dgmpp::Attribute * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Attributes_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Attribute * > *arg1 = (std::vector< dgmpp::Attribute * > *) 0 ;
  std::vector< dgmpp::Attribute * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Attribute * > **)&jarg1; 
  result = ((std::vector< dgmpp::Attribute * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Attributes_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< dgmpp::Attribute * > *arg1 = (std::vector< dgmpp::Attribute * > *) 0 ;
  std::vector< dgmpp::Attribute * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Attribute * > **)&jarg1; 
  arg2 = (std::vector< dgmpp::Attribute * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_Attributes_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< dgmpp::Attribute * > *arg1 = (std::vector< dgmpp::Attribute * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Attribute * > **)&jarg1; 
  result = (bool)((std::vector< dgmpp::Attribute * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Attributes_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< dgmpp::Attribute * > *arg1 = (std::vector< dgmpp::Attribute * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Attribute * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Attributes_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< dgmpp::Attribute * > *arg1 = (std::vector< dgmpp::Attribute * > *) 0 ;
  std::vector< dgmpp::Attribute * >::value_type *arg2 = 0 ;
  std::vector< dgmpp::Attribute * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< dgmpp::Attribute * > **)&jarg1; 
  temp2 = *(std::vector< dgmpp::Attribute * >::value_type *)&jarg2;
  arg2 = (std::vector< dgmpp::Attribute * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< dgmpp::Attribute * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Attributes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Attribute * > *arg1 = (std::vector< dgmpp::Attribute * > *) 0 ;
  int arg2 ;
  std::vector< dgmpp::Attribute * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Attribute * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< dgmpp::Attribute * >::value_type *) &std_vector_Sl_dgmpp_Attribute_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< dgmpp::Attribute * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Attributes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< dgmpp::Attribute * > *arg1 = (std::vector< dgmpp::Attribute * > *) 0 ;
  int arg2 ;
  std::vector< dgmpp::Attribute * >::value_type *arg3 = 0 ;
  std::vector< dgmpp::Attribute * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< dgmpp::Attribute * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< dgmpp::Attribute * >::value_type *)&jarg3;
  arg3 = (std::vector< dgmpp::Attribute * >::value_type *)&temp3; 
  try {
    std_vector_Sl_dgmpp_Attribute_Sm__Sg__set(arg1,arg2,(dgmpp::Attribute *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Attributes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< dgmpp::Attribute * > *arg1 = (std::vector< dgmpp::Attribute * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< dgmpp::Attribute * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Attribute_1attributeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Attribute *arg1 = (dgmpp::Attribute *) 0 ;
  dgmpp::AttributeID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Attribute **)&jarg1; 
  result = (dgmpp::AttributeID)dgmpp_Attribute_attributeID((dgmpp::Attribute const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Attribute_1owner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Attribute *arg1 = (dgmpp::Attribute *) 0 ;
  dgmpp::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Attribute **)&jarg1; 
  result = (dgmpp::Type *) &((dgmpp::Attribute const *)arg1)->owner();
  *(dgmpp::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Attribute_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Attribute *arg1 = (dgmpp::Attribute *) 0 ;
  dgmpp::Float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Attribute **)&jarg1; 
  result = (dgmpp::Float)(arg1)->value();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Attribute_1initialValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Attribute *arg1 = (dgmpp::Attribute *) 0 ;
  dgmpp::Float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Attribute **)&jarg1; 
  result = (dgmpp::Float)((dgmpp::Attribute const *)arg1)->initialValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Attribute(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Attribute *arg1 = (dgmpp::Attribute *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Attribute **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Types_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Type * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< dgmpp::Type * > *)new std::vector< dgmpp::Type * >();
  *(std::vector< dgmpp::Type * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Types_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Type * >::size_type arg1 ;
  std::vector< dgmpp::Type * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< dgmpp::Type * >::size_type)jarg1; 
  result = (std::vector< dgmpp::Type * > *)new std::vector< dgmpp::Type * >(arg1);
  *(std::vector< dgmpp::Type * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Types_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Type * > *arg1 = (std::vector< dgmpp::Type * > *) 0 ;
  std::vector< dgmpp::Type * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Type * > **)&jarg1; 
  result = ((std::vector< dgmpp::Type * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Types_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Type * > *arg1 = (std::vector< dgmpp::Type * > *) 0 ;
  std::vector< dgmpp::Type * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Type * > **)&jarg1; 
  result = ((std::vector< dgmpp::Type * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Types_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< dgmpp::Type * > *arg1 = (std::vector< dgmpp::Type * > *) 0 ;
  std::vector< dgmpp::Type * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Type * > **)&jarg1; 
  arg2 = (std::vector< dgmpp::Type * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_Types_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< dgmpp::Type * > *arg1 = (std::vector< dgmpp::Type * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Type * > **)&jarg1; 
  result = (bool)((std::vector< dgmpp::Type * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Types_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< dgmpp::Type * > *arg1 = (std::vector< dgmpp::Type * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Type * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Types_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< dgmpp::Type * > *arg1 = (std::vector< dgmpp::Type * > *) 0 ;
  std::vector< dgmpp::Type * >::value_type *arg2 = 0 ;
  std::vector< dgmpp::Type * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< dgmpp::Type * > **)&jarg1; 
  temp2 = *(std::vector< dgmpp::Type * >::value_type *)&jarg2;
  arg2 = (std::vector< dgmpp::Type * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< dgmpp::Type * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Types_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Type * > *arg1 = (std::vector< dgmpp::Type * > *) 0 ;
  int arg2 ;
  std::vector< dgmpp::Type * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Type * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< dgmpp::Type * >::value_type *) &std_vector_Sl_dgmpp_Type_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< dgmpp::Type * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Types_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< dgmpp::Type * > *arg1 = (std::vector< dgmpp::Type * > *) 0 ;
  int arg2 ;
  std::vector< dgmpp::Type * >::value_type *arg3 = 0 ;
  std::vector< dgmpp::Type * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< dgmpp::Type * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< dgmpp::Type * >::value_type *)&jarg3;
  arg3 = (std::vector< dgmpp::Type * >::value_type *)&temp3; 
  try {
    std_vector_Sl_dgmpp_Type_Sm__Sg__set(arg1,arg2,(dgmpp::Type *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Types(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< dgmpp::Type * > *arg1 = (std::vector< dgmpp::Type * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< dgmpp::Type * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Type(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Type *arg1 = (dgmpp::Type *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Type **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Type_1typeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Type *arg1 = (dgmpp::Type *) 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Type **)&jarg1; 
  result = (dgmpp::TypeID)dgmpp_Type_typeID((dgmpp::Type const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Type_1groupID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Type *arg1 = (dgmpp::Type *) 0 ;
  dgmpp::GroupID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Type **)&jarg1; 
  result = (dgmpp::GroupID)dgmpp_Type_groupID((dgmpp::Type const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Type_1categoryID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Type *arg1 = (dgmpp::Type *) 0 ;
  dgmpp::CategoryID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Type **)&jarg1; 
  result = (dgmpp::CategoryID)dgmpp_Type_categoryID((dgmpp::Type const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Type_1attribute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Type *arg1 = (dgmpp::Type *) 0 ;
  dgmpp::AttributeID arg2 ;
  dgmpp::Attribute *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Type **)&jarg1; 
  arg2 = (dgmpp::AttributeID)jarg2; 
  result = (dgmpp::Attribute *)dgmpp_Type_attribute(arg1,arg2);
  *(dgmpp::Attribute **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Type_1affectors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Type *arg1 = (dgmpp::Type *) 0 ;
  std::vector< dgmpp::Type * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Type **)&jarg1; 
  result = dgmpp_Type_affectors((dgmpp::Type const *)arg1);
  *(std::vector< dgmpp::Type * > **)&jresult = new std::vector< dgmpp::Type * >((const std::vector< dgmpp::Type * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Type_1attributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Type *arg1 = (dgmpp::Type *) 0 ;
  std::vector< dgmpp::Attribute * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Type **)&jarg1; 
  result = dgmpp_Type_attributes((dgmpp::Type const *)arg1);
  *(std::vector< dgmpp::Attribute * > **)&jresult = new std::vector< dgmpp::Attribute * >((const std::vector< dgmpp::Attribute * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Type_1parent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Type *arg1 = (dgmpp::Type *) 0 ;
  dgmpp::Type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Type **)&jarg1; 
  result = (dgmpp::Type *)(arg1)->parent();
  *(dgmpp::Type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Charge_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Charge *arg1 = (dgmpp::Charge *) 0 ;
  dgmpp::Charge::Size result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Charge **)&jarg1; 
  result = (dgmpp::Charge::Size)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Charge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Charge *arg1 = (dgmpp::Charge *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Charge **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Module_1anySocket_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::Module::Socket result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Module::Socket)(dgmpp::Module::Socket)dgmpp::Module::anySocket;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Module_1Create(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  dgmpp::TypeID arg1 ;
  std::unique_ptr< dgmpp::Module > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (dgmpp::TypeID)jarg1; 
  result = dgmpp::Module::Create(arg1);
  
  jlong lpp = 0;
  *(dgmpp::Module**) &lpp = (&result)->release();
  jresult = lpp;
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_Module_1canHaveState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Module::State arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  arg2 = (dgmpp::Module::State)jarg2; 
  result = (bool)(arg1)->canHaveState(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Module_1availableStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::vector< dgmpp::Module::State > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (arg1)->availableStates();
  *(std::vector< dgmpp::Module::State > **)&jresult = new std::vector< dgmpp::Module::State >((const std::vector< dgmpp::Module::State > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Module_1state_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Module::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Module::State)((dgmpp::Module const *)arg1)->state();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Module_1preferredState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Module::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Module::State)((dgmpp::Module const *)arg1)->preferredState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Module_1state_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Module::State arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  arg2 = (dgmpp::Module::State)jarg2; 
  (arg1)->state(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Module_1target_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Ship *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Ship *)((dgmpp::Module const *)arg1)->target();
  *(dgmpp::Ship **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Module_1target_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Ship *arg2 = (dgmpp::Ship *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  arg2 = *(dgmpp::Ship **)&jarg2; 
  (arg1)->target(arg2);
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Module_1slot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Module::Slot result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Module::Slot)((dgmpp::Module const *)arg1)->slot();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Module_1hardpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Module::Hardpoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Module::Hardpoint)((dgmpp::Module const *)arg1)->hardpoint();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Module_1socket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Module::Socket result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Module::Socket)((dgmpp::Module const *)arg1)->socket();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Module_1charge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Charge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Charge *)((dgmpp::Module const *)arg1)->charge();
  *(dgmpp::Charge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Module_1charge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::TypeID arg2 ;
  dgmpp::Charge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (dgmpp::Charge *)(arg1)->charge(arg2);
  *(dgmpp::Charge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_Module_1canFit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Charge *arg2 = (dgmpp::Charge *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  arg2 = *(dgmpp::Charge **)&jarg2; 
  result = (bool)(arg1)->canFit(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Module_1chargeGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  std::vector< dgmpp::GroupID > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (std::vector< dgmpp::GroupID > *) &((dgmpp::Module const *)arg1)->chargeGroups();
  *(std::vector< dgmpp::GroupID > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Module_1chargeSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Charge::Size result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Charge::Size)(arg1)->chargeSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_Module_1requireTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (bool)((dgmpp::Module const *)arg1)->requireTarget();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_Module_1fail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (bool)((dgmpp::Module const *)arg1)->fail();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Module_1charges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (arg1)->charges();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Module_1shots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (arg1)->shots();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Module_1capUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::GigaJoulePerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (arg1)->capUse();
  *(dgmpp::GigaJoulePerSecond **)&jresult = new dgmpp::GigaJoulePerSecond((const dgmpp::GigaJoulePerSecond &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Module_1cpuUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Teraflops result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Teraflops)(arg1)->cpuUse();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Module_1powerGridUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::MegaWatts result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::MegaWatts)(arg1)->powerGridUse();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Module_1calibrationUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::CalibrationPoints result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::CalibrationPoints)(arg1)->calibrationUse();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Module_1accuracyScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Points result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Points)(arg1)->accuracyScore();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Module_1signatureResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Meter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Meter)(arg1)->signatureResolution();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Module_1miningYield(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::CubicMeterPerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (arg1)->miningYield();
  *(dgmpp::CubicMeterPerSecond **)&jresult = new dgmpp::CubicMeterPerSecond((const dgmpp::CubicMeterPerSecond &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Module_1volley(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::DamageVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (arg1)->volley();
  *(dgmpp::DamageVector **)&jresult = new dgmpp::DamageVector((const dgmpp::DamageVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Module_1dps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::DamagePerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (arg1)->dps();
  *(dgmpp::DamagePerSecond **)&jresult = new dgmpp::DamagePerSecond((const dgmpp::DamagePerSecond &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Module_1optimal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Meter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Meter)(arg1)->optimal();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Module_1falloff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Meter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Meter)(arg1)->falloff();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Module_1reloadTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Seconds result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Seconds)dgmpp_Module_reloadTime(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Module_1cycleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Seconds result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Seconds)dgmpp_Module_cycleTime(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Module_1rawCycleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Seconds result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Seconds)dgmpp_Module_rawCycleTime(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Module_1lifeTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  dgmpp::Seconds result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Module **)&jarg1; 
  result = (dgmpp::Seconds)dgmpp_Module_lifeTime(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Module(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Module *arg1 = (dgmpp::Module *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Module **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1GroupIDs_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< dgmpp::GroupID > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< dgmpp::GroupID > *)new std::vector< dgmpp::GroupID >();
  *(std::vector< dgmpp::GroupID > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1GroupIDs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum dgmpp::GroupID >::size_type arg1 ;
  std::vector< dgmpp::GroupID > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum dgmpp::GroupID >::size_type)jarg1; 
  result = (std::vector< dgmpp::GroupID > *)new std::vector< dgmpp::GroupID >(arg1);
  *(std::vector< dgmpp::GroupID > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_GroupIDs_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::GroupID > *arg1 = (std::vector< dgmpp::GroupID > *) 0 ;
  std::vector< enum dgmpp::GroupID >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::GroupID > **)&jarg1; 
  result = ((std::vector< dgmpp::GroupID > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_GroupIDs_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::GroupID > *arg1 = (std::vector< dgmpp::GroupID > *) 0 ;
  std::vector< enum dgmpp::GroupID >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::GroupID > **)&jarg1; 
  result = ((std::vector< dgmpp::GroupID > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_GroupIDs_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< dgmpp::GroupID > *arg1 = (std::vector< dgmpp::GroupID > *) 0 ;
  std::vector< enum dgmpp::GroupID >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::GroupID > **)&jarg1; 
  arg2 = (std::vector< enum dgmpp::GroupID >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_GroupIDs_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< dgmpp::GroupID > *arg1 = (std::vector< dgmpp::GroupID > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::GroupID > **)&jarg1; 
  result = (bool)((std::vector< dgmpp::GroupID > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_GroupIDs_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< dgmpp::GroupID > *arg1 = (std::vector< dgmpp::GroupID > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::GroupID > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_GroupIDs_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< dgmpp::GroupID > *arg1 = (std::vector< dgmpp::GroupID > *) 0 ;
  std::vector< enum dgmpp::GroupID >::value_type *arg2 = 0 ;
  std::vector< enum dgmpp::GroupID >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::GroupID > **)&jarg1; 
  temp2 = (std::vector< enum dgmpp::GroupID >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum dgmpp::GroupID >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_GroupIDs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< dgmpp::GroupID > *arg1 = (std::vector< dgmpp::GroupID > *) 0 ;
  int arg2 ;
  std::vector< enum dgmpp::GroupID >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::GroupID > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum dgmpp::GroupID >::value_type *) &std_vector_Sl_dgmpp_GroupID_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_GroupIDs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< dgmpp::GroupID > *arg1 = (std::vector< dgmpp::GroupID > *) 0 ;
  int arg2 ;
  std::vector< enum dgmpp::GroupID >::value_type *arg3 = 0 ;
  std::vector< enum dgmpp::GroupID >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::GroupID > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum dgmpp::GroupID >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_dgmpp_GroupID_Sg__set(arg1,arg2,(enum dgmpp::GroupID const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1GroupIDs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< dgmpp::GroupID > *arg1 = (std::vector< dgmpp::GroupID > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< dgmpp::GroupID > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1States_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Module::State > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< dgmpp::Module::State > *)new std::vector< dgmpp::Module::State >();
  *(std::vector< dgmpp::Module::State > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1States_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum dgmpp::Module::State >::size_type arg1 ;
  std::vector< dgmpp::Module::State > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum dgmpp::Module::State >::size_type)jarg1; 
  result = (std::vector< dgmpp::Module::State > *)new std::vector< dgmpp::Module::State >(arg1);
  *(std::vector< dgmpp::Module::State > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_States_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Module::State > *arg1 = (std::vector< dgmpp::Module::State > *) 0 ;
  std::vector< enum dgmpp::Module::State >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Module::State > **)&jarg1; 
  result = ((std::vector< dgmpp::Module::State > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_States_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Module::State > *arg1 = (std::vector< dgmpp::Module::State > *) 0 ;
  std::vector< enum dgmpp::Module::State >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Module::State > **)&jarg1; 
  result = ((std::vector< dgmpp::Module::State > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_States_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< dgmpp::Module::State > *arg1 = (std::vector< dgmpp::Module::State > *) 0 ;
  std::vector< enum dgmpp::Module::State >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Module::State > **)&jarg1; 
  arg2 = (std::vector< enum dgmpp::Module::State >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_States_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< dgmpp::Module::State > *arg1 = (std::vector< dgmpp::Module::State > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Module::State > **)&jarg1; 
  result = (bool)((std::vector< dgmpp::Module::State > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_States_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< dgmpp::Module::State > *arg1 = (std::vector< dgmpp::Module::State > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Module::State > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_States_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< dgmpp::Module::State > *arg1 = (std::vector< dgmpp::Module::State > *) 0 ;
  std::vector< enum dgmpp::Module::State >::value_type *arg2 = 0 ;
  std::vector< enum dgmpp::Module::State >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Module::State > **)&jarg1; 
  temp2 = (std::vector< enum dgmpp::Module::State >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum dgmpp::Module::State >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_States_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< dgmpp::Module::State > *arg1 = (std::vector< dgmpp::Module::State > *) 0 ;
  int arg2 ;
  std::vector< enum dgmpp::Module::State >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Module::State > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum dgmpp::Module::State >::value_type *) &std_vector_Sl_dgmpp_Module_State_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_States_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< dgmpp::Module::State > *arg1 = (std::vector< dgmpp::Module::State > *) 0 ;
  int arg2 ;
  std::vector< enum dgmpp::Module::State >::value_type *arg3 = 0 ;
  std::vector< enum dgmpp::Module::State >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Module::State > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum dgmpp::Module::State >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_dgmpp_Module_State_Sg__set(arg1,arg2,(enum dgmpp::Module::State const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1States(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< dgmpp::Module::State > *arg1 = (std::vector< dgmpp::Module::State > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< dgmpp::Module::State > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Drone_1anySquadronTag_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dgmpp::Drone::SquadronTag result;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Drone::SquadronTag)(dgmpp::Drone::SquadronTag)dgmpp::Drone::anySquadronTag;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Drone_1active_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->active(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_Drone_1active_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  result = (bool)((dgmpp::Drone const *)arg1)->active();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Drone_1charge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  dgmpp::Charge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  result = (dgmpp::Charge *)((dgmpp::Drone const *)arg1)->charge();
  *(dgmpp::Charge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Drone_1squadron(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  dgmpp::Drone::Squadron result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  result = (dgmpp::Drone::Squadron)((dgmpp::Drone const *)arg1)->squadron();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Drone_1squadronSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  result = (arg1)->squadronSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Drone_1squadronTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  dgmpp::Drone::SquadronTag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  result = (dgmpp::Drone::SquadronTag)((dgmpp::Drone const *)arg1)->squadronTag();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Drone_1target_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  dgmpp::Ship *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  result = (dgmpp::Ship *)((dgmpp::Drone const *)arg1)->target();
  *(dgmpp::Ship **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Drone_1target_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  dgmpp::Ship *arg2 = (dgmpp::Ship *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  arg2 = *(dgmpp::Ship **)&jarg2; 
  (arg1)->target(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Drone_1volley(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  dgmpp::DamageVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  result = (arg1)->volley();
  *(dgmpp::DamageVector **)&jresult = new dgmpp::DamageVector((const dgmpp::DamageVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Drone_1dps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  dgmpp::DamagePerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  result = (arg1)->dps();
  *(dgmpp::DamagePerSecond **)&jresult = new dgmpp::DamagePerSecond((const dgmpp::DamagePerSecond &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Drone_1optimal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  dgmpp::Meter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  result = (dgmpp::Meter)(arg1)->optimal();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Drone_1falloff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  dgmpp::Meter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  result = (dgmpp::Meter)(arg1)->falloff();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Drone_1accuracyScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  dgmpp::Points result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  result = (dgmpp::Points)(arg1)->accuracyScore();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Drone_1miningYield(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  dgmpp::CubicMeterPerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  result = (arg1)->miningYield();
  *(dgmpp::CubicMeterPerSecond **)&jresult = new dgmpp::CubicMeterPerSecond((const dgmpp::CubicMeterPerSecond &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Drone_1velocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  dgmpp::MetersPerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  result = (arg1)->velocity();
  *(dgmpp::MetersPerSecond **)&jresult = new dgmpp::MetersPerSecond((const dgmpp::MetersPerSecond &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Drone_1cycleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  dgmpp::Seconds result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  result = (dgmpp::Seconds)dgmpp_Drone_cycleTime(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Drone(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Drone *arg1 = (dgmpp::Drone *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Drone **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Area(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Area *arg1 = (dgmpp::Area *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Area **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1CategoryIDs_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< dgmpp::CategoryID > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< dgmpp::CategoryID > *)new std::vector< dgmpp::CategoryID >();
  *(std::vector< dgmpp::CategoryID > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1CategoryIDs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum dgmpp::CategoryID >::size_type arg1 ;
  std::vector< dgmpp::CategoryID > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum dgmpp::CategoryID >::size_type)jarg1; 
  result = (std::vector< dgmpp::CategoryID > *)new std::vector< dgmpp::CategoryID >(arg1);
  *(std::vector< dgmpp::CategoryID > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_CategoryIDs_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::CategoryID > *arg1 = (std::vector< dgmpp::CategoryID > *) 0 ;
  std::vector< enum dgmpp::CategoryID >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::CategoryID > **)&jarg1; 
  result = ((std::vector< dgmpp::CategoryID > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_CategoryIDs_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::CategoryID > *arg1 = (std::vector< dgmpp::CategoryID > *) 0 ;
  std::vector< enum dgmpp::CategoryID >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::CategoryID > **)&jarg1; 
  result = ((std::vector< dgmpp::CategoryID > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_CategoryIDs_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< dgmpp::CategoryID > *arg1 = (std::vector< dgmpp::CategoryID > *) 0 ;
  std::vector< enum dgmpp::CategoryID >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::CategoryID > **)&jarg1; 
  arg2 = (std::vector< enum dgmpp::CategoryID >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_CategoryIDs_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< dgmpp::CategoryID > *arg1 = (std::vector< dgmpp::CategoryID > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::CategoryID > **)&jarg1; 
  result = (bool)((std::vector< dgmpp::CategoryID > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_CategoryIDs_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< dgmpp::CategoryID > *arg1 = (std::vector< dgmpp::CategoryID > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::CategoryID > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_CategoryIDs_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< dgmpp::CategoryID > *arg1 = (std::vector< dgmpp::CategoryID > *) 0 ;
  std::vector< enum dgmpp::CategoryID >::value_type *arg2 = 0 ;
  std::vector< enum dgmpp::CategoryID >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::CategoryID > **)&jarg1; 
  temp2 = (std::vector< enum dgmpp::CategoryID >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum dgmpp::CategoryID >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_CategoryIDs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< dgmpp::CategoryID > *arg1 = (std::vector< dgmpp::CategoryID > *) 0 ;
  int arg2 ;
  std::vector< enum dgmpp::CategoryID >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::CategoryID > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum dgmpp::CategoryID >::value_type *) &std_vector_Sl_dgmpp_CategoryID_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_CategoryIDs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< dgmpp::CategoryID > *arg1 = (std::vector< dgmpp::CategoryID > *) 0 ;
  int arg2 ;
  std::vector< enum dgmpp::CategoryID >::value_type *arg3 = 0 ;
  std::vector< enum dgmpp::CategoryID >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::CategoryID > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum dgmpp::CategoryID >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_dgmpp_CategoryID_Sg__set(arg1,arg2,(enum dgmpp::CategoryID const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1CategoryIDs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< dgmpp::CategoryID > *arg1 = (std::vector< dgmpp::CategoryID > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< dgmpp::CategoryID > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Modules_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Module * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< dgmpp::Module * > *)new std::vector< dgmpp::Module * >();
  *(std::vector< dgmpp::Module * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Modules_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Module * >::size_type arg1 ;
  std::vector< dgmpp::Module * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< dgmpp::Module * >::size_type)jarg1; 
  result = (std::vector< dgmpp::Module * > *)new std::vector< dgmpp::Module * >(arg1);
  *(std::vector< dgmpp::Module * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Modules_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Module * > *arg1 = (std::vector< dgmpp::Module * > *) 0 ;
  std::vector< dgmpp::Module * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Module * > **)&jarg1; 
  result = ((std::vector< dgmpp::Module * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Modules_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Module * > *arg1 = (std::vector< dgmpp::Module * > *) 0 ;
  std::vector< dgmpp::Module * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Module * > **)&jarg1; 
  result = ((std::vector< dgmpp::Module * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Modules_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< dgmpp::Module * > *arg1 = (std::vector< dgmpp::Module * > *) 0 ;
  std::vector< dgmpp::Module * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Module * > **)&jarg1; 
  arg2 = (std::vector< dgmpp::Module * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_Modules_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< dgmpp::Module * > *arg1 = (std::vector< dgmpp::Module * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Module * > **)&jarg1; 
  result = (bool)((std::vector< dgmpp::Module * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Modules_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< dgmpp::Module * > *arg1 = (std::vector< dgmpp::Module * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Module * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Modules_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< dgmpp::Module * > *arg1 = (std::vector< dgmpp::Module * > *) 0 ;
  std::vector< dgmpp::Module * >::value_type *arg2 = 0 ;
  std::vector< dgmpp::Module * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< dgmpp::Module * > **)&jarg1; 
  temp2 = *(std::vector< dgmpp::Module * >::value_type *)&jarg2;
  arg2 = (std::vector< dgmpp::Module * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< dgmpp::Module * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Modules_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Module * > *arg1 = (std::vector< dgmpp::Module * > *) 0 ;
  int arg2 ;
  std::vector< dgmpp::Module * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Module * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< dgmpp::Module * >::value_type *) &std_vector_Sl_dgmpp_Module_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< dgmpp::Module * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Modules_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< dgmpp::Module * > *arg1 = (std::vector< dgmpp::Module * > *) 0 ;
  int arg2 ;
  std::vector< dgmpp::Module * >::value_type *arg3 = 0 ;
  std::vector< dgmpp::Module * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< dgmpp::Module * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< dgmpp::Module * >::value_type *)&jarg3;
  arg3 = (std::vector< dgmpp::Module * >::value_type *)&temp3; 
  try {
    std_vector_Sl_dgmpp_Module_Sm__Sg__set(arg1,arg2,(dgmpp::Module *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Modules(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< dgmpp::Module * > *arg1 = (std::vector< dgmpp::Module * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< dgmpp::Module * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Drones_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Drone * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< dgmpp::Drone * > *)new std::vector< dgmpp::Drone * >();
  *(std::vector< dgmpp::Drone * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Drones_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Drone * >::size_type arg1 ;
  std::vector< dgmpp::Drone * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< dgmpp::Drone * >::size_type)jarg1; 
  result = (std::vector< dgmpp::Drone * > *)new std::vector< dgmpp::Drone * >(arg1);
  *(std::vector< dgmpp::Drone * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Drones_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Drone * > *arg1 = (std::vector< dgmpp::Drone * > *) 0 ;
  std::vector< dgmpp::Drone * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Drone * > **)&jarg1; 
  result = ((std::vector< dgmpp::Drone * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Drones_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Drone * > *arg1 = (std::vector< dgmpp::Drone * > *) 0 ;
  std::vector< dgmpp::Drone * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Drone * > **)&jarg1; 
  result = ((std::vector< dgmpp::Drone * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Drones_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< dgmpp::Drone * > *arg1 = (std::vector< dgmpp::Drone * > *) 0 ;
  std::vector< dgmpp::Drone * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Drone * > **)&jarg1; 
  arg2 = (std::vector< dgmpp::Drone * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_Drones_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< dgmpp::Drone * > *arg1 = (std::vector< dgmpp::Drone * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Drone * > **)&jarg1; 
  result = (bool)((std::vector< dgmpp::Drone * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Drones_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< dgmpp::Drone * > *arg1 = (std::vector< dgmpp::Drone * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Drone * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Drones_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< dgmpp::Drone * > *arg1 = (std::vector< dgmpp::Drone * > *) 0 ;
  std::vector< dgmpp::Drone * >::value_type *arg2 = 0 ;
  std::vector< dgmpp::Drone * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< dgmpp::Drone * > **)&jarg1; 
  temp2 = *(std::vector< dgmpp::Drone * >::value_type *)&jarg2;
  arg2 = (std::vector< dgmpp::Drone * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< dgmpp::Drone * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Drones_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Drone * > *arg1 = (std::vector< dgmpp::Drone * > *) 0 ;
  int arg2 ;
  std::vector< dgmpp::Drone * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Drone * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< dgmpp::Drone * >::value_type *) &std_vector_Sl_dgmpp_Drone_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< dgmpp::Drone * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Drones_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< dgmpp::Drone * > *arg1 = (std::vector< dgmpp::Drone * > *) 0 ;
  int arg2 ;
  std::vector< dgmpp::Drone * >::value_type *arg3 = 0 ;
  std::vector< dgmpp::Drone * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< dgmpp::Drone * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< dgmpp::Drone * >::value_type *)&jarg3;
  arg3 = (std::vector< dgmpp::Drone * >::value_type *)&temp3; 
  try {
    std_vector_Sl_dgmpp_Drone_Sm__Sg__set(arg1,arg2,(dgmpp::Drone *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Drones(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< dgmpp::Drone * > *arg1 = (std::vector< dgmpp::Drone * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< dgmpp::Drone * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Capacitor_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Capacitor *arg1 = (dgmpp::Capacitor *) 0 ;
  dgmpp::GigaJoule result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Capacitor **)&jarg1; 
  result = (dgmpp::GigaJoule)(arg1)->capacity();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_Capacitor_1isStable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Capacitor *arg1 = (dgmpp::Capacitor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Capacitor **)&jarg1; 
  result = (bool)(arg1)->isStable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Capacitor_1stableLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Capacitor *arg1 = (dgmpp::Capacitor *) 0 ;
  dgmpp::Percent result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Capacitor **)&jarg1; 
  result = (dgmpp::Percent)(arg1)->stableLevel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Capacitor_1rechargeTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Capacitor *arg1 = (dgmpp::Capacitor *) 0 ;
  dgmpp::Seconds result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Capacitor **)&jarg1; 
  result = (dgmpp::Seconds)dgmpp_Capacitor_rechargeTime(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Capacitor_1lastsTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Capacitor *arg1 = (dgmpp::Capacitor *) 0 ;
  dgmpp::Seconds result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Capacitor **)&jarg1; 
  result = (dgmpp::Seconds)dgmpp_Capacitor_lastsTime(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Capacitor_1use(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Capacitor *arg1 = (dgmpp::Capacitor *) 0 ;
  dgmpp::GigaJoulePerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Capacitor **)&jarg1; 
  result = (arg1)->use();
  *(dgmpp::GigaJoulePerSecond **)&jresult = new dgmpp::GigaJoulePerSecond((const dgmpp::GigaJoulePerSecond &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Capacitor_1recharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Capacitor *arg1 = (dgmpp::Capacitor *) 0 ;
  dgmpp::GigaJoulePerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Capacitor **)&jarg1; 
  result = (arg1)->recharge();
  *(dgmpp::GigaJoulePerSecond **)&jresult = new dgmpp::GigaJoulePerSecond((const dgmpp::GigaJoulePerSecond &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Capacitor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Capacitor *arg1 = (dgmpp::Capacitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Capacitor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1supportedDroneCategories(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::vector< dgmpp::CategoryID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->supportedDroneCategories();
  *(std::vector< dgmpp::CategoryID > **)&jresult = new std::vector< dgmpp::CategoryID >((const std::vector< dgmpp::CategoryID > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Ship_1rigSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Ship::RigSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::Ship::RigSize)(arg1)->rigSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Ship_1damagePattern_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::DamageVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = *(dgmpp::DamageVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dgmpp::DamageVector const & reference is null");
    return ;
  } 
  (arg1)->damagePattern((dgmpp::DamageVector const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1damagePattern_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::DamageVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::DamageVector *) &((dgmpp::Ship const *)arg1)->damagePattern();
  *(dgmpp::DamageVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1addModule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3, jint jarg4) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::TypeID arg2 ;
  bool arg3 ;
  dgmpp::Module::Socket arg4 ;
  dgmpp::Module *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = (dgmpp::TypeID)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (dgmpp::Module::Socket)jarg4; 
  result = (dgmpp::Module *)(arg1)->addModule(arg2,arg3,arg4);
  *(dgmpp::Module **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1addModule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::TypeID arg2 ;
  bool arg3 ;
  dgmpp::Module *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = (dgmpp::TypeID)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (dgmpp::Module *)(arg1)->addModule(arg2,arg3);
  *(dgmpp::Module **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1addModule_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::TypeID arg2 ;
  dgmpp::Module *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (dgmpp::Module *)(arg1)->addModule(arg2);
  *(dgmpp::Module **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1addDrone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::TypeID arg2 ;
  dgmpp::Drone::SquadronTag arg3 ;
  dgmpp::Drone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = (dgmpp::TypeID)jarg2; 
  arg3 = (dgmpp::Drone::SquadronTag)jarg3; 
  result = (dgmpp::Drone *)(arg1)->addDrone(arg2,arg3);
  *(dgmpp::Drone **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1addDrone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::TypeID arg2 ;
  dgmpp::Drone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (dgmpp::Drone *)(arg1)->addDrone(arg2);
  *(dgmpp::Drone **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Ship_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Module *arg2 = (dgmpp::Module *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = *(dgmpp::Module **)&jarg2; 
  (arg1)->remove(arg2);
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Ship_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Drone *arg2 = (dgmpp::Drone *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = *(dgmpp::Drone **)&jarg2; 
  (arg1)->remove(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_Ship_1isModuleAllowed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Module *arg2 = (dgmpp::Module *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = *(dgmpp::Module **)&jarg2; 
  result = (bool)(arg1)->isModuleAllowed(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Ship_1canFit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Module *arg2 = (dgmpp::Module *) 0 ;
  dgmpp::Ship::CanFitResult result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = *(dgmpp::Module **)&jarg2; 
  result = (dgmpp::Ship::CanFitResult)(arg1)->canFit(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Ship_1canFit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Drone *arg2 = (dgmpp::Drone *) 0 ;
  dgmpp::Ship::CanFitResult result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = *(dgmpp::Drone **)&jarg2; 
  result = (dgmpp::Ship::CanFitResult)(arg1)->canFit(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1modules_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Module::Slot arg2 ;
  std::vector< dgmpp::Module * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = (dgmpp::Module::Slot)jarg2; 
  result = ((dgmpp::Ship const *)arg1)->modules(arg2);
  *(std::vector< dgmpp::Module * > **)&jresult = new std::vector< dgmpp::Module * >((const std::vector< dgmpp::Module * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1modules_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::vector< dgmpp::Module * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = ((dgmpp::Ship const *)arg1)->modules();
  *(std::vector< dgmpp::Module * > **)&jresult = new std::vector< dgmpp::Module * >((const std::vector< dgmpp::Module * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1drones(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  std::vector< dgmpp::Drone * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = ((dgmpp::Ship const *)arg1)->drones();
  *(std::vector< dgmpp::Drone * > **)&jresult = new std::vector< dgmpp::Drone * >((const std::vector< dgmpp::Drone * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1totalDroneSquadron_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Drone::Squadron arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = (dgmpp::Drone::Squadron)jarg2; 
  result = (arg1)->totalDroneSquadron(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1totalDroneSquadron_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->totalDroneSquadron();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1usedDroneSquadron_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Drone::Squadron arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = (dgmpp::Drone::Squadron)jarg2; 
  result = (arg1)->usedDroneSquadron(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1usedDroneSquadron_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->usedDroneSquadron();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1totalFighterLaunchTubes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->totalFighterLaunchTubes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1usedFighterLaunchTubes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->usedFighterLaunchTubes();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1totalSlots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Module::Slot arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = (dgmpp::Module::Slot)jarg2; 
  result = (arg1)->totalSlots(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1freeSlots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Module::Slot arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = (dgmpp::Module::Slot)jarg2; 
  result = (arg1)->freeSlots(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1usedSlots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Module::Slot arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = (dgmpp::Module::Slot)jarg2; 
  result = (arg1)->usedSlots(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1totalHardpoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Module::Hardpoint arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = (dgmpp::Module::Hardpoint)jarg2; 
  result = (arg1)->totalHardpoints(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1freeHardpoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Module::Hardpoint arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = (dgmpp::Module::Hardpoint)jarg2; 
  result = (arg1)->freeHardpoints(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1usedHardpoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Module::Hardpoint arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = (dgmpp::Module::Hardpoint)jarg2; 
  result = (arg1)->usedHardpoints(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1capacitor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Capacitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::Capacitor *) &(arg1)->capacitor();
  *(dgmpp::Capacitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1usedCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::CalibrationPoints result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::CalibrationPoints)(arg1)->usedCalibration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1totalCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::CalibrationPoints result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::CalibrationPoints)(arg1)->totalCalibration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1usedPowerGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::GigaJoule result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::GigaJoule)(arg1)->usedPowerGrid();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1totalPowerGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::GigaJoule result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::GigaJoule)(arg1)->totalPowerGrid();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1usedCPU(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Teraflops result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::Teraflops)(arg1)->usedCPU();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1totalCPU(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Teraflops result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::Teraflops)(arg1)->totalCPU();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1usedDroneBandwidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::MegabitsPerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::MegabitsPerSecond)(arg1)->usedDroneBandwidth();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1totalDroneBandwidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::MegabitsPerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::MegabitsPerSecond)(arg1)->totalDroneBandwidth();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1usedDroneBay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::CubicMeter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::CubicMeter)(arg1)->usedDroneBay();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1totalDroneBay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::CubicMeter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::CubicMeter)(arg1)->totalDroneBay();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1usedFighterHangar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::CubicMeter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::CubicMeter)(arg1)->usedFighterHangar();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1totalFighterHangar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::CubicMeter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::CubicMeter)(arg1)->totalFighterHangar();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1cargoCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::CubicMeter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::CubicMeter)(arg1)->cargoCapacity();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1oreHoldCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::CubicMeter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::CubicMeter)(arg1)->oreHoldCapacity();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1resistances(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Resistances result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->resistances();
  *(dgmpp::Resistances **)&jresult = new dgmpp::Resistances((const dgmpp::Resistances &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1tank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Tank result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->tank();
  *(dgmpp::Tank **)&jresult = new dgmpp::Tank((const dgmpp::Tank &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1effectiveTank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Tank result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->effectiveTank();
  *(dgmpp::Tank **)&jresult = new dgmpp::Tank((const dgmpp::Tank &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1sustainableTank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Tank result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->sustainableTank();
  *(dgmpp::Tank **)&jresult = new dgmpp::Tank((const dgmpp::Tank &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1effectiveSustainableTank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Tank result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->effectiveSustainableTank();
  *(dgmpp::Tank **)&jresult = new dgmpp::Tank((const dgmpp::Tank &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1hitPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::HitPoints result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->hitPoints();
  *(dgmpp::HitPoints **)&jresult = new dgmpp::HitPoints((const dgmpp::HitPoints &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1effectiveHitPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::HitPoints result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->effectiveHitPoints();
  *(dgmpp::HitPoints **)&jresult = new dgmpp::HitPoints((const dgmpp::HitPoints &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1turretsVolley(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::DamageVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->turretsVolley();
  *(dgmpp::DamageVector **)&jresult = new dgmpp::DamageVector((const dgmpp::DamageVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1launchersVolley(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::DamageVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->launchersVolley();
  *(dgmpp::DamageVector **)&jresult = new dgmpp::DamageVector((const dgmpp::DamageVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1dronesVolley(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::DamageVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->dronesVolley();
  *(dgmpp::DamageVector **)&jresult = new dgmpp::DamageVector((const dgmpp::DamageVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1turretsDPS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::DamagePerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->turretsDPS();
  *(dgmpp::DamagePerSecond **)&jresult = new dgmpp::DamagePerSecond((const dgmpp::DamagePerSecond &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1launchersDPS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::DamagePerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->launchersDPS();
  *(dgmpp::DamagePerSecond **)&jresult = new dgmpp::DamagePerSecond((const dgmpp::DamagePerSecond &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1dronesDPS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::DamagePerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->dronesDPS();
  *(dgmpp::DamagePerSecond **)&jresult = new dgmpp::DamagePerSecond((const dgmpp::DamagePerSecond &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1minerYield(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::CubicMeterPerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->minerYield();
  *(dgmpp::CubicMeterPerSecond **)&jresult = new dgmpp::CubicMeterPerSecond((const dgmpp::CubicMeterPerSecond &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1droneYield(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::CubicMeterPerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->droneYield();
  *(dgmpp::CubicMeterPerSecond **)&jresult = new dgmpp::CubicMeterPerSecond((const dgmpp::CubicMeterPerSecond &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1alignTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Seconds result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::Seconds)dgmpp_Ship_alignTime(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1warpSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::AstronomicalUnitsPerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->warpSpeed();
  *(dgmpp::AstronomicalUnitsPerSecond **)&jresult = new dgmpp::AstronomicalUnitsPerSecond((const dgmpp::AstronomicalUnitsPerSecond &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1maxWarpDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::AstronomicalUnit result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::AstronomicalUnit)(arg1)->maxWarpDistance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1velocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::MetersPerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->velocity();
  *(dgmpp::MetersPerSecond **)&jresult = new dgmpp::MetersPerSecond((const dgmpp::MetersPerSecond &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1signatureRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Meter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::Meter)(arg1)->signatureRadius();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1mass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Kilogram result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::Kilogram)(arg1)->mass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1volume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::CubicMeter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::CubicMeter)(arg1)->volume();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1agility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Multiplier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::Multiplier)(arg1)->agility();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1maxVelocityInOrbit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Meter arg2 ;
  dgmpp::MetersPerSecond result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  arg2 = (dgmpp::Meter)jarg2; 
  result = (arg1)->maxVelocityInOrbit(arg2);
  *(dgmpp::MetersPerSecond **)&jresult = new dgmpp::MetersPerSecond((const dgmpp::MetersPerSecond &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1orbitRadiusWithTransverseVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::MetersPerSecond arg2 ;
  dgmpp::MetersPerSecond *argp2 ;
  dgmpp::Meter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  argp2 = *(dgmpp::MetersPerSecond **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dgmpp::MetersPerSecond");
    return 0;
  }
  arg2 = *argp2; 
  result = (dgmpp::Meter)(arg1)->orbitRadiusWithTransverseVelocity(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1orbitRadiusWithAngularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::RadiansPerSecond arg2 ;
  dgmpp::RadiansPerSecond *argp2 ;
  dgmpp::Meter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  argp2 = *(dgmpp::RadiansPerSecond **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dgmpp::RadiansPerSecond");
    return 0;
  }
  arg2 = *argp2; 
  result = (dgmpp::Meter)(arg1)->orbitRadiusWithAngularVelocity(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1maxTargets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (arg1)->maxTargets();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1maxTargetRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Meter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::Meter)(arg1)->maxTargetRange();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1scanStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Points result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::Points)(arg1)->scanStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Ship_1scanType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Ship::ScanType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::Ship::ScanType)(arg1)->scanType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1probeSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Meter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::Meter)(arg1)->probeSize();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Ship_1scanResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  dgmpp::Millimeter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  result = (dgmpp::Millimeter)(arg1)->scanResolution();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Ship(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Ship *arg1 = (dgmpp::Ship *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Ship **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Structure_1fuelBlockTypeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Structure *arg1 = (dgmpp::Structure *) 0 ;
  dgmpp::TypeID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Structure **)&jarg1; 
  result = (dgmpp::TypeID)(arg1)->fuelBlockTypeID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Structure_1fuelUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Structure *arg1 = (dgmpp::Structure *) 0 ;
  dgmpp::rate< dgmpp::Float,std::chrono::hours > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Structure **)&jarg1; 
  result = (arg1)->fuelUse();
  *(dgmpp::rate< dgmpp::Float,std::chrono::hours > **)&jresult = new dgmpp::rate< dgmpp::Float,std::chrono::hours >((const dgmpp::rate< dgmpp::Float,std::chrono::hours > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Structure(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Structure *arg1 = (dgmpp::Structure *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Structure **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Characters_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Character * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< dgmpp::Character * > *)new std::vector< dgmpp::Character * >();
  *(std::vector< dgmpp::Character * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Characters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Character * >::size_type arg1 ;
  std::vector< dgmpp::Character * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< dgmpp::Character * >::size_type)jarg1; 
  result = (std::vector< dgmpp::Character * > *)new std::vector< dgmpp::Character * >(arg1);
  *(std::vector< dgmpp::Character * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Characters_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Character * > *arg1 = (std::vector< dgmpp::Character * > *) 0 ;
  std::vector< dgmpp::Character * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Character * > **)&jarg1; 
  result = ((std::vector< dgmpp::Character * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Characters_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Character * > *arg1 = (std::vector< dgmpp::Character * > *) 0 ;
  std::vector< dgmpp::Character * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Character * > **)&jarg1; 
  result = ((std::vector< dgmpp::Character * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Characters_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< dgmpp::Character * > *arg1 = (std::vector< dgmpp::Character * > *) 0 ;
  std::vector< dgmpp::Character * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Character * > **)&jarg1; 
  arg2 = (std::vector< dgmpp::Character * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_Characters_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< dgmpp::Character * > *arg1 = (std::vector< dgmpp::Character * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Character * > **)&jarg1; 
  result = (bool)((std::vector< dgmpp::Character * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Characters_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< dgmpp::Character * > *arg1 = (std::vector< dgmpp::Character * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Character * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Characters_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< dgmpp::Character * > *arg1 = (std::vector< dgmpp::Character * > *) 0 ;
  std::vector< dgmpp::Character * >::value_type *arg2 = 0 ;
  std::vector< dgmpp::Character * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< dgmpp::Character * > **)&jarg1; 
  temp2 = *(std::vector< dgmpp::Character * >::value_type *)&jarg2;
  arg2 = (std::vector< dgmpp::Character * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< dgmpp::Character * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Characters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Character * > *arg1 = (std::vector< dgmpp::Character * > *) 0 ;
  int arg2 ;
  std::vector< dgmpp::Character * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Character * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< dgmpp::Character * >::value_type *) &std_vector_Sl_dgmpp_Character_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< dgmpp::Character * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Characters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< dgmpp::Character * > *arg1 = (std::vector< dgmpp::Character * > *) 0 ;
  int arg2 ;
  std::vector< dgmpp::Character * >::value_type *arg3 = 0 ;
  std::vector< dgmpp::Character * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< dgmpp::Character * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< dgmpp::Character * >::value_type *)&jarg3;
  arg3 = (std::vector< dgmpp::Character * >::value_type *)&temp3; 
  try {
    std_vector_Sl_dgmpp_Character_Sm__Sg__set(arg1,arg2,(dgmpp::Character *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Characters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< dgmpp::Character * > *arg1 = (std::vector< dgmpp::Character * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< dgmpp::Character * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Implants_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Implant * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< dgmpp::Implant * > *)new std::vector< dgmpp::Implant * >();
  *(std::vector< dgmpp::Implant * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Implants_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Implant * >::size_type arg1 ;
  std::vector< dgmpp::Implant * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< dgmpp::Implant * >::size_type)jarg1; 
  result = (std::vector< dgmpp::Implant * > *)new std::vector< dgmpp::Implant * >(arg1);
  *(std::vector< dgmpp::Implant * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Implants_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Implant * > *arg1 = (std::vector< dgmpp::Implant * > *) 0 ;
  std::vector< dgmpp::Implant * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Implant * > **)&jarg1; 
  result = ((std::vector< dgmpp::Implant * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Implants_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Implant * > *arg1 = (std::vector< dgmpp::Implant * > *) 0 ;
  std::vector< dgmpp::Implant * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Implant * > **)&jarg1; 
  result = ((std::vector< dgmpp::Implant * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Implants_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< dgmpp::Implant * > *arg1 = (std::vector< dgmpp::Implant * > *) 0 ;
  std::vector< dgmpp::Implant * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Implant * > **)&jarg1; 
  arg2 = (std::vector< dgmpp::Implant * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_Implants_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< dgmpp::Implant * > *arg1 = (std::vector< dgmpp::Implant * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Implant * > **)&jarg1; 
  result = (bool)((std::vector< dgmpp::Implant * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Implants_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< dgmpp::Implant * > *arg1 = (std::vector< dgmpp::Implant * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Implant * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Implants_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< dgmpp::Implant * > *arg1 = (std::vector< dgmpp::Implant * > *) 0 ;
  std::vector< dgmpp::Implant * >::value_type *arg2 = 0 ;
  std::vector< dgmpp::Implant * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< dgmpp::Implant * > **)&jarg1; 
  temp2 = *(std::vector< dgmpp::Implant * >::value_type *)&jarg2;
  arg2 = (std::vector< dgmpp::Implant * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< dgmpp::Implant * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Implants_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Implant * > *arg1 = (std::vector< dgmpp::Implant * > *) 0 ;
  int arg2 ;
  std::vector< dgmpp::Implant * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Implant * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< dgmpp::Implant * >::value_type *) &std_vector_Sl_dgmpp_Implant_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< dgmpp::Implant * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Implants_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< dgmpp::Implant * > *arg1 = (std::vector< dgmpp::Implant * > *) 0 ;
  int arg2 ;
  std::vector< dgmpp::Implant * >::value_type *arg3 = 0 ;
  std::vector< dgmpp::Implant * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< dgmpp::Implant * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< dgmpp::Implant * >::value_type *)&jarg3;
  arg3 = (std::vector< dgmpp::Implant * >::value_type *)&temp3; 
  try {
    std_vector_Sl_dgmpp_Implant_Sm__Sg__set(arg1,arg2,(dgmpp::Implant *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Implants(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< dgmpp::Implant * > *arg1 = (std::vector< dgmpp::Implant * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< dgmpp::Implant * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Boosters_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Booster * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< dgmpp::Booster * > *)new std::vector< dgmpp::Booster * >();
  *(std::vector< dgmpp::Booster * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Boosters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Booster * >::size_type arg1 ;
  std::vector< dgmpp::Booster * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< dgmpp::Booster * >::size_type)jarg1; 
  result = (std::vector< dgmpp::Booster * > *)new std::vector< dgmpp::Booster * >(arg1);
  *(std::vector< dgmpp::Booster * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Boosters_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Booster * > *arg1 = (std::vector< dgmpp::Booster * > *) 0 ;
  std::vector< dgmpp::Booster * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Booster * > **)&jarg1; 
  result = ((std::vector< dgmpp::Booster * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Boosters_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Booster * > *arg1 = (std::vector< dgmpp::Booster * > *) 0 ;
  std::vector< dgmpp::Booster * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Booster * > **)&jarg1; 
  result = ((std::vector< dgmpp::Booster * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Boosters_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< dgmpp::Booster * > *arg1 = (std::vector< dgmpp::Booster * > *) 0 ;
  std::vector< dgmpp::Booster * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Booster * > **)&jarg1; 
  arg2 = (std::vector< dgmpp::Booster * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_Boosters_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< dgmpp::Booster * > *arg1 = (std::vector< dgmpp::Booster * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Booster * > **)&jarg1; 
  result = (bool)((std::vector< dgmpp::Booster * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Boosters_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< dgmpp::Booster * > *arg1 = (std::vector< dgmpp::Booster * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Booster * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Boosters_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< dgmpp::Booster * > *arg1 = (std::vector< dgmpp::Booster * > *) 0 ;
  std::vector< dgmpp::Booster * >::value_type *arg2 = 0 ;
  std::vector< dgmpp::Booster * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< dgmpp::Booster * > **)&jarg1; 
  temp2 = *(std::vector< dgmpp::Booster * >::value_type *)&jarg2;
  arg2 = (std::vector< dgmpp::Booster * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< dgmpp::Booster * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Boosters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Booster * > *arg1 = (std::vector< dgmpp::Booster * > *) 0 ;
  int arg2 ;
  std::vector< dgmpp::Booster * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Booster * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< dgmpp::Booster * >::value_type *) &std_vector_Sl_dgmpp_Booster_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< dgmpp::Booster * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Boosters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< dgmpp::Booster * > *arg1 = (std::vector< dgmpp::Booster * > *) 0 ;
  int arg2 ;
  std::vector< dgmpp::Booster * >::value_type *arg3 = 0 ;
  std::vector< dgmpp::Booster * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< dgmpp::Booster * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< dgmpp::Booster * >::value_type *)&jarg3;
  arg3 = (std::vector< dgmpp::Booster * >::value_type *)&temp3; 
  try {
    std_vector_Sl_dgmpp_Booster_Sm__Sg__set(arg1,arg2,(dgmpp::Booster *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Boosters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< dgmpp::Booster * > *arg1 = (std::vector< dgmpp::Booster * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< dgmpp::Booster * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Skills_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Skill * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< dgmpp::Skill * > *)new std::vector< dgmpp::Skill * >();
  *(std::vector< dgmpp::Skill * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Skills_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Skill * >::size_type arg1 ;
  std::vector< dgmpp::Skill * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< dgmpp::Skill * >::size_type)jarg1; 
  result = (std::vector< dgmpp::Skill * > *)new std::vector< dgmpp::Skill * >(arg1);
  *(std::vector< dgmpp::Skill * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Skills_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Skill * > *arg1 = (std::vector< dgmpp::Skill * > *) 0 ;
  std::vector< dgmpp::Skill * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Skill * > **)&jarg1; 
  result = ((std::vector< dgmpp::Skill * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Skills_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Skill * > *arg1 = (std::vector< dgmpp::Skill * > *) 0 ;
  std::vector< dgmpp::Skill * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Skill * > **)&jarg1; 
  result = ((std::vector< dgmpp::Skill * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Skills_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< dgmpp::Skill * > *arg1 = (std::vector< dgmpp::Skill * > *) 0 ;
  std::vector< dgmpp::Skill * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Skill * > **)&jarg1; 
  arg2 = (std::vector< dgmpp::Skill * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_Skills_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< dgmpp::Skill * > *arg1 = (std::vector< dgmpp::Skill * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Skill * > **)&jarg1; 
  result = (bool)((std::vector< dgmpp::Skill * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Skills_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< dgmpp::Skill * > *arg1 = (std::vector< dgmpp::Skill * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Skill * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Skills_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< dgmpp::Skill * > *arg1 = (std::vector< dgmpp::Skill * > *) 0 ;
  std::vector< dgmpp::Skill * >::value_type *arg2 = 0 ;
  std::vector< dgmpp::Skill * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< dgmpp::Skill * > **)&jarg1; 
  temp2 = *(std::vector< dgmpp::Skill * >::value_type *)&jarg2;
  arg2 = (std::vector< dgmpp::Skill * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< dgmpp::Skill * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Skills_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< dgmpp::Skill * > *arg1 = (std::vector< dgmpp::Skill * > *) 0 ;
  int arg2 ;
  std::vector< dgmpp::Skill * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dgmpp::Skill * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< dgmpp::Skill * >::value_type *) &std_vector_Sl_dgmpp_Skill_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< dgmpp::Skill * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Skills_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< dgmpp::Skill * > *arg1 = (std::vector< dgmpp::Skill * > *) 0 ;
  int arg2 ;
  std::vector< dgmpp::Skill * >::value_type *arg3 = 0 ;
  std::vector< dgmpp::Skill * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< dgmpp::Skill * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< dgmpp::Skill * >::value_type *)&jarg3;
  arg3 = (std::vector< dgmpp::Skill * >::value_type *)&temp3; 
  try {
    std_vector_Sl_dgmpp_Skill_Sm__Sg__set(arg1,arg2,(dgmpp::Skill *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Skills(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< dgmpp::Skill * > *arg1 = (std::vector< dgmpp::Skill * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< dgmpp::Skill * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Implant_1slot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Implant *arg1 = (dgmpp::Implant *) 0 ;
  dgmpp::Implant::Slot result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Implant **)&jarg1; 
  result = (dgmpp::Implant::Slot)((dgmpp::Implant const *)arg1)->slot();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Implant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Implant *arg1 = (dgmpp::Implant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Implant **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Booster_1slot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Booster *arg1 = (dgmpp::Booster *) 0 ;
  dgmpp::Booster::Slot result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Booster **)&jarg1; 
  result = (dgmpp::Booster::Slot)((dgmpp::Booster const *)arg1)->slot();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Booster(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Booster *arg1 = (dgmpp::Booster *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Booster **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_dgmpp_dgmppJNI_Skill_1level_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dgmpp::Skill *arg1 = (dgmpp::Skill *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Skill **)&jarg1; 
  result = (int)(arg1)->level();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Skill_1level_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dgmpp::Skill *arg1 = (dgmpp::Skill *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Skill **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->level(arg2);
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Skill(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Skill *arg1 = (dgmpp::Skill *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Skill **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Character_1ship_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::Ship *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  result = (dgmpp::Ship *)((dgmpp::Character const *)arg1)->ship();
  *(dgmpp::Ship **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Character_1ship_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::TypeID arg2 ;
  dgmpp::Ship *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (dgmpp::Ship *)(arg1)->ship(arg2);
  *(dgmpp::Ship **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Character_1structure_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::Structure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  result = (dgmpp::Structure *)(arg1)->structure();
  *(dgmpp::Structure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Character_1structure_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::TypeID arg2 ;
  dgmpp::Structure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (dgmpp::Structure *)(arg1)->structure(arg2);
  *(dgmpp::Structure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Character_1setSkillLevels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSkillLevels(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Character_1addImplant_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::TypeID arg2 ;
  bool arg3 ;
  dgmpp::Implant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  arg2 = (dgmpp::TypeID)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (dgmpp::Implant *)(arg1)->addImplant(arg2,arg3);
  *(dgmpp::Implant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Character_1addImplant_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::TypeID arg2 ;
  dgmpp::Implant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (dgmpp::Implant *)(arg1)->addImplant(arg2);
  *(dgmpp::Implant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Character_1addBooster_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::TypeID arg2 ;
  bool arg3 ;
  dgmpp::Booster *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  arg2 = (dgmpp::TypeID)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (dgmpp::Booster *)(arg1)->addBooster(arg2,arg3);
  *(dgmpp::Booster **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Character_1addBooster_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::TypeID arg2 ;
  dgmpp::Booster *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (dgmpp::Booster *)(arg1)->addBooster(arg2);
  *(dgmpp::Booster **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Character_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::Implant *arg2 = (dgmpp::Implant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  arg2 = *(dgmpp::Implant **)&jarg2; 
  (arg1)->remove(arg2);
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Character_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::Booster *arg2 = (dgmpp::Booster *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  arg2 = *(dgmpp::Booster **)&jarg2; 
  (arg1)->remove(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Character_1skills(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  std::vector< dgmpp::Skill * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  result = ((dgmpp::Character const *)arg1)->skills();
  *(std::vector< dgmpp::Skill * > **)&jresult = new std::vector< dgmpp::Skill * >((const std::vector< dgmpp::Skill * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Character_1implants(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  std::vector< dgmpp::Implant * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  result = ((dgmpp::Character const *)arg1)->implants();
  *(std::vector< dgmpp::Implant * > **)&jresult = new std::vector< dgmpp::Implant * >((const std::vector< dgmpp::Implant * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Character_1boosters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  std::vector< dgmpp::Booster * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  result = ((dgmpp::Character const *)arg1)->boosters();
  *(std::vector< dgmpp::Booster * > **)&jresult = new std::vector< dgmpp::Booster * >((const std::vector< dgmpp::Booster * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Character_1implant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::Implant::Slot arg2 ;
  dgmpp::Implant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  arg2 = (dgmpp::Implant::Slot)jarg2; 
  result = (dgmpp::Implant *)((dgmpp::Character const *)arg1)->implant(arg2);
  *(dgmpp::Implant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Character_1booster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::Booster::Slot arg2 ;
  dgmpp::Booster *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  arg2 = (dgmpp::Booster::Slot)jarg2; 
  result = (dgmpp::Booster *)((dgmpp::Character const *)arg1)->booster(arg2);
  *(dgmpp::Booster **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_dgmpp_dgmppJNI_Character_1droneControlDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  dgmpp::Meter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Character **)&jarg1; 
  result = (dgmpp::Meter)(arg1)->droneControlDistance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Character(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Character *arg1 = (dgmpp::Character *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Character **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_new_1Gang(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dgmpp::Gang *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (dgmpp::Gang *)new dgmpp::Gang();
  *(dgmpp::Gang **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Gang_1addPilot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  dgmpp::Character *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Gang **)&jarg1; 
  result = (dgmpp::Character *)(arg1)->addPilot();
  *(dgmpp::Character **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Gang_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  dgmpp::Character *arg2 = (dgmpp::Character *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dgmpp::Gang **)&jarg1; 
  arg2 = *(dgmpp::Character **)&jarg2; 
  (arg1)->remove(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Gang_1pilots(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  std::vector< dgmpp::Character * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Gang **)&jarg1; 
  result = ((dgmpp::Gang const *)arg1)->pilots();
  *(std::vector< dgmpp::Character * > **)&jresult = new std::vector< dgmpp::Character * >((const std::vector< dgmpp::Character * > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_dgmpp_dgmppJNI_Gang_1factorReload_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Gang **)&jarg1; 
  result = (bool)((dgmpp::Gang const *)arg1)->factorReload();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_Gang_1factorReload_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Gang **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->factorReload(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Gang_1area_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  dgmpp::Area *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Gang **)&jarg1; 
  result = (dgmpp::Area *)((dgmpp::Gang const *)arg1)->area();
  *(dgmpp::Area **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Gang_1area_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  dgmpp::TypeID arg2 ;
  dgmpp::Area *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dgmpp::Gang **)&jarg1; 
  arg2 = (dgmpp::TypeID)jarg2; 
  result = (dgmpp::Area *)(arg1)->area(arg2);
  *(dgmpp::Area **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_dgmpp_dgmppJNI_delete_1Gang(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dgmpp::Gang *arg1 = (dgmpp::Gang *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dgmpp::Gang **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Charge_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(dgmpp::Type **)&baseptr = *(dgmpp::Charge **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Module_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(dgmpp::Type **)&baseptr = *(dgmpp::Module **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Drone_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(dgmpp::Type **)&baseptr = *(dgmpp::Drone **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Area_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(dgmpp::Type **)&baseptr = *(dgmpp::Area **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Ship_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(dgmpp::Type **)&baseptr = *(dgmpp::Ship **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Structure_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(dgmpp::Ship **)&baseptr = *(dgmpp::Structure **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Implant_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(dgmpp::Type **)&baseptr = *(dgmpp::Implant **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Booster_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(dgmpp::Type **)&baseptr = *(dgmpp::Booster **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Skill_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(dgmpp::Type **)&baseptr = *(dgmpp::Skill **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Character_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(dgmpp::Type **)&baseptr = *(dgmpp::Character **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_dgmpp_dgmppJNI_Gang_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(dgmpp::Type **)&baseptr = *(dgmpp::Gang **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

